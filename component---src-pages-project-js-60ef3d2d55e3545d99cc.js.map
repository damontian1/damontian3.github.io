{"version":3,"sources":["webpack:///./src/components/ProjectDetails.js","webpack:///./src/pages/project.js"],"names":["ProjectDetails","props","dataMatch","allDataJson","edges","filter","item","node","id","title","className","map","key","alt","fluid","url","childImageSharp","objective","href","website","github","stack","i","Project","basepath","path"],"mappings":"usYAsFeA,EA/EQ,SAAAC,GACrB,IAwBMC,EAxBI,OAwBaC,YAAYC,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,KAAOP,EAAMO,MAE/E,OAAIN,EAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKO,MAAM,wBACX,6BAASD,GAAG,sBAAsBE,UAAU,SAC1C,6BACGR,EACES,KAAI,SAAAL,GACH,OACE,yBAAKI,UAAU,kBAAkBE,IAAKN,EAAKC,KAAKC,IAC9C,wBAAIE,UAAU,gDACXJ,EAAKC,KAAKE,OAEb,kBAAC,IAAD,CAAKC,UAAU,+BAA+BG,IAAI,GAAGC,MAAOR,EAAKC,KAAKQ,IAAIC,gBAAgBF,QAC1F,yBAAKJ,UAAU,QACb,0BAAMA,UAAU,uBAAhB,aACA,2BAAIJ,EAAKC,KAAKU,YAEhB,yBAAKP,UAAU,QACb,6BACE,0BAAMA,UAAU,uBAAhB,YAEF,uBAAGQ,KAAMZ,EAAKC,KAAKY,QAAST,UAAU,aAAaJ,EAAKC,KAAKY,UAE/D,yBAAKT,UAAU,QACb,6BACE,0BAAMA,UAAU,uBAAhB,WAEF,uBAAGQ,KAAMZ,EAAKC,KAAKa,OAAQV,UAAU,aAAaJ,EAAKC,KAAKa,SAE9D,6BACE,6BACE,0BAAMV,UAAU,uBAAhB,eAEDJ,EAAKC,KAAKc,MAAMV,KAAI,SAACL,EAAMgB,GAAP,OACnB,0BAAMV,IAAKU,EAAGZ,UAAU,gDAAgDJ,cAY1F,kBAAC,UAAD,OCtESiB,UANC,kBACd,kBAAC,SAAD,CAAQC,SAAS,YACf,kBAAC,EAAD,CAAgBC,KAAK","file":"component---src-pages-project-js-60ef3d2d55e3545d99cc.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Layout from \"./layout\"\nimport SEO from \"./seo\"\nimport Error from \"../pages/404\"\nimport Img from \"gatsby-image\"\n\nconst ProjectDetails = props => {\n  const data = useStaticQuery(graphql`\n    {\n      allDataJson {\n        edges {\n          node {\n            github\n            website\n            title\n            stack\n            objective\n            id\n            url {\n              childImageSharp {\n                fluid(maxWidth: 500) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const dataMatch = data.allDataJson.edges.filter(item => item.node.id === props.id);\n\n  if (dataMatch) {\n    return (\n      <Layout>\n        <SEO title=\"Project Description\" />\n        <section id=\"project-description\" className=\"py-12\">\n          <div>\n            {dataMatch\n              .map(item => {\n                return (\n                  <div className=\"max-w-screen-sm\" key={item.node.id}>\n                    <h2 className=\"font-bold leading-tight text-3xl sm:text-4xl\">\n                      {item.node.title}\n                    </h2>\n                    <Img className=\"max-w-sm w-full my-8 rounded\" alt=\"\" fluid={item.node.url.childImageSharp.fluid} />\n                    <div className=\"mb-6\">\n                      <span className=\"uppercase font-bold\">Objective</span>\n                      <p>{item.node.objective}</p>\n                    </div>\n                    <div className=\"mb-6\">\n                      <div>\n                        <span className=\"uppercase font-bold\">Website</span>\n                      </div>\n                      <a href={item.node.website} className=\"underline\">{item.node.website}</a>\n                    </div>\n                    <div className=\"mb-6\">\n                      <div>\n                        <span className=\"uppercase font-bold\">Github</span>\n                      </div>\n                      <a href={item.node.github} className=\"underline\">{item.node.github}</a>\n                    </div>\n                    <div>\n                      <div>\n                        <span className=\"uppercase font-bold\">Tech Stack</span>\n                      </div>\n                      {item.node.stack.map((item, i) => (\n                        <span key={i} className=\"inline-block bg-gray-200 mr-1 mb-2 px-2 py-1\">{item}</span>\n                      ))}\n                    </div>\n                  </div>\n                )\n              })}\n          </div>\n        </section>\n      </Layout>\n    )\n  } else {\n    return (\n      <Error />\n    )\n  }\n\n}\nexport default ProjectDetails\n","import React from \"react\"\nimport { Router } from '@reach/router'\nimport ProjectDetails from '../components/ProjectDetails';\n\n\nconst Project = () => (\n  <Router basepath=\"/project\">\n    <ProjectDetails path=\"/:id\" />\n  </Router>\n)\n\nexport default Project"],"sourceRoot":""}