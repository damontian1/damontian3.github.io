{"version":3,"sources":["webpack:///./src/components/ProjectDetails.js","webpack:///./src/pages/project.js"],"names":["ProjectDetails","props","data","allDataJson","edges","map","item","node","id","indexOf","title","className","filter","matched","images","elem","childImageSharp","fluid","originalName","tag","key","alt","objective","href","website","github","stack","i","Project","basepath","path"],"mappings":"0kdA+FeA,EAxFQ,SAAAC,GACrB,IAAMC,EAAI,OAgCV,OAD2F,IAAxEA,EAAKC,YAAYC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,MAAIC,QAAQR,EAAMO,IAG9E,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKE,MAAM,wBACX,6BAASF,GAAG,sBAAsBG,UAAU,SAC1C,6BACGT,EAAKC,YAAYC,MACfQ,QAAO,SAAAN,GAAI,OAAIA,EAAKC,KAAKC,KAAOP,EAAMO,MACtCH,KAAI,SAAAC,GACH,IAAIO,EAAUX,EAAKY,OAAOV,MAAMQ,QAAO,SAAAG,GAAI,OAAIA,EAAKR,KAAKS,gBAAgBC,MAAMC,eAAiBZ,EAAKC,KAAKY,OAAKd,KAAI,SAAAU,GAAI,OAAIA,EAAKR,KAAKS,gBAAgBC,SACrJ,OACE,yBAAKN,UAAU,kBAAkBS,IAAKd,EAAKC,KAAKC,IAC9C,wBAAIG,UAAU,gDACXL,EAAKC,KAAKG,OAGb,kBAAC,IAAD,CAAKC,UAAU,+BAA+BU,IAAI,GAAGJ,MAAOJ,EAAQ,KACpE,yBAAKF,UAAU,QACb,0BAAMA,UAAU,uBAAhB,aACA,2BAAIL,EAAKC,KAAKe,YAEhB,yBAAKX,UAAU,QACb,6BACE,0BAAMA,UAAU,uBAAhB,YAEF,uBAAGY,KAAMjB,EAAKC,KAAKiB,QAASb,UAAU,aAAaL,EAAKC,KAAKiB,UAE/D,yBAAKb,UAAU,QACb,6BACE,0BAAMA,UAAU,uBAAhB,WAEF,uBAAGY,KAAMjB,EAAKC,KAAKkB,OAAQd,UAAU,aAAaL,EAAKC,KAAKkB,SAE9D,6BACE,6BACE,0BAAMd,UAAU,uBAAhB,eAEDL,EAAKC,KAAKmB,MAAMrB,KAAI,SAACC,EAAMqB,GAAP,OACnB,0BAAMP,IAAKO,EAAGhB,UAAU,gDAAgDL,cAY1F,kBAAC,UAAD,OC/ESsB,UANC,kBACd,kBAAC,SAAD,CAAQC,SAAS,YACf,kBAAC,EAAD,CAAgBC,KAAK","file":"component---src-pages-project-js-fa3cb4a3329982dc1728.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Layout from \"./layout\"\nimport SEO from \"./seo\"\nimport Error from \"../pages/404\"\nimport Img from \"gatsby-image\"\n\nconst ProjectDetails = props => {\n  const data = useStaticQuery(graphql`\n    query {\n      allDataJson {\n        edges {\n          node {\n            github\n            website\n            title\n            stack\n            slogan\n            objective\n            art\n            id\n            tag\n          }\n        }\n      }\n      images: allFile(filter: {extension: {eq: \"png\"}}) {\n        edges {\n          node {\n            childImageSharp {\n              fluid(maxWidth: 500, quality: 100) {\n                ...GatsbyImageSharpFluid\n                originalName\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n  const dataExists = data.allDataJson.edges.map(item => item.node.id).indexOf(props.id) !== -1;\n  if (dataExists) {\n    return (\n      <Layout>\n        <SEO title=\"Project Description\" />\n        <section id=\"project-description\" className=\"py-12\">\n          <div>\n            {data.allDataJson.edges\n              .filter(item => item.node.id === props.id)\n              .map(item => {\n                let matched = data.images.edges.filter(elem => elem.node.childImageSharp.fluid.originalName === item.node.tag).map(elem => elem.node.childImageSharp.fluid);\n                return (\n                  <div className=\"max-w-screen-sm\" key={item.node.id}>\n                    <h2 className=\"font-bold leading-tight text-3xl sm:text-4xl\">\n                      {item.node.title}\n                    </h2>\n                    {/* <img className=\"max-w-sm w-full my-8 rounded\" alt=\"\" src={matched[0]} /> */}\n                    <Img className=\"max-w-sm w-full my-8 rounded\" alt=\"\" fluid={matched[0]} />\n                    <div className=\"mb-6\">\n                      <span className=\"uppercase font-bold\">Objective</span>\n                      <p>{item.node.objective}</p>\n                    </div>\n                    <div className=\"mb-6\">\n                      <div>\n                        <span className=\"uppercase font-bold\">Website</span>\n                      </div>\n                      <a href={item.node.website} className=\"underline\">{item.node.website}</a>\n                    </div>\n                    <div className=\"mb-6\">\n                      <div>\n                        <span className=\"uppercase font-bold\">Github</span>\n                      </div>\n                      <a href={item.node.github} className=\"underline\">{item.node.github}</a>\n                    </div>\n                    <div>\n                      <div>\n                        <span className=\"uppercase font-bold\">Tech Stack</span>\n                      </div>\n                      {item.node.stack.map((item, i) => (\n                        <span key={i} className=\"inline-block bg-gray-200 mr-1 mb-2 px-2 py-1\">{item}</span>\n                      ))}\n                    </div>\n                  </div>\n                )\n              })}\n          </div>\n        </section>\n      </Layout>\n    )\n  } else {\n    return (\n      <Error />\n    )\n  }\n\n}\nexport default ProjectDetails\n","import React from \"react\"\nimport { Router } from '@reach/router'\nimport ProjectDetails from '../components/ProjectDetails';\n\n\nconst Project = () => (\n  <Router basepath=\"/project\">\n    <ProjectDetails path=\"/:id\" />\n  </Router>\n)\n\nexport default Project"],"sourceRoot":""}